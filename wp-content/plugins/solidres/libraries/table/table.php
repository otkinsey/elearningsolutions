<?php/*------------------------------------------------------------------------  Solidres - Hotel booking extension for Wordpress  ------------------------------------------------------------------------  @Author    Solidres Team  @Website   http://www.solidres.com  @Copyright Copyright (C) 2015 Solidres. All Rights Reserved.  @License   GNU General Public License version 3, or later------------------------------------------------------------------------*/namespace SR\Table;use SR\Helper\SR_Loader;use SR\Query\SR_Query;if (!defined('ABSPATH')){	exit;}class SR_Table{	protected $_db;	protected $_table;	protected $_key;	protected $_context;	protected $_cache = array();	public function __construct($config = array('db_table' => null, 'key' => 'id'))	{		$this->_db = $this->getQuery()->getDbo();		if (array_key_exists('db_table', $config) && null !== $config['db_table'])		{			$this->_table = $config['db_table'];		}		else		{			die(__('Missing DB Table in constructor arguments'));		}		if (!preg_match('/^(' . $this->_db->prefix . ')/', $this->_table))		{			$this->_table = $this->_db->prefix . $this->_table;		}		if (array_key_exists('key', $config))		{			$this->_key = $config['key'];		}		if (array_key_exists('context', $config))		{			$this->_context = $config['context'];		}		else		{			$this->_context = isset($_REQUEST['page']) ? $_REQUEST['page'] : $this->_table;		}		$this->loadTableFields();	}	public function getQuery($reset = true)	{		static $_query;		if (!is_object($_query))		{			SR_Loader::import('query.query');			$_query = new SR_Query;		}		return $reset ? $_query->clear() : $_query;	}	public function getDbo()	{		return $this->_db;	}	public function bind($data = array())	{		$fields = $this->loadTableFields();		foreach ($data as $field => $value)		{			if (in_array($field, $fields))			{				$this->{$field} = $value;			}		}		return $this;	}	public function load($keys = array(), $reset = true)	{		$query = $this->getQuery();		$query->select(join(', ', $this->loadTableFields()))			->from($this->_table);		if (!is_array($keys) && !empty($this->_key))		{			$key = (int) $keys;			$query->where($this->_key . ' = ' . $key);		}		else		{			$query->where((array) $keys);		}		if ($reset)		{			$this->reset();		}		if ($result = $this->_db->get_row($query->toString(), ARRAY_A))		{			$this->bind($result);		}		return $result;	}	public function getData()	{		$data   = array();		$fields = $this->loadTableFields();		foreach ($fields as $field)		{			$data[$field] = $this->{$field};		}		return $data;	}	public function save($data = null)	{		if (is_array($data) && count($data))		{			$this->bind($data);		}		$data = apply_filters('sr_save_prepare_data', $this->getData(), $this->_context);		do_action('sr_before_save', $data, $this->_context);		if (!empty($this->_key) && !empty($data[$this->_key]))		{			$result = $this->update($data);		}		else		{			if ($result = $this->insert($data))			{				$pk = $this->getInsertId();				if (!empty($this->_key))				{					$data[$this->_key] = $pk;				}				$this->load($pk);			}		}		if ($result)		{			do_action('sr_after_save', $data, $this->_context);		}		return $result;	}	public function update($data = array())	{		$data = apply_filters('sr_update_prepare_data', $data, $this->_context);		do_action('sr_before_update', $data, $this->_context);		$result = $this			->getQuery()			->update($this->_table, $data, array($this->_key => $this->{$this->_key}), $this->getDataFormats($data));		if ($result)		{			do_action('sr_after_update', $data, $result, $this->_context);		}		return $result;	}	public function insert($data = array())	{		$data = apply_filters('sr_insert_prepare_data', $data, $this->_context);		do_action('sr_before_insert', $data, $this->_context);		$result = $this			->getQuery()			->insert($this->_table, $data, $this->getDataFormats($data));		if ($result)		{			do_action('sr_after_insert', $data, $result, $this->_context);		}		return $result;	}	public function delete($pks = array())	{		do_action('sr_before_delete', $pks, $this->_context);		settype($pks, 'array');		if (count($pks))		{			$pks    = array_map(function ($pk)			{				return (int) $pk;			}, $pks);			$result = $this->_db->query('DELETE FROM `' . $this->_table . '` WHERE `' . $this->_key . '` IN (' . join(',', $pks) . ')');		}		else		{			// Remove self			$result = $this->_db->delete($this->_table, array($this->_key => $this->{$this->_key}));			$this->reset();		}		do_action('sr_after_delete', $pks, $result, $this->_context);		return $result;	}	public function getInsertId()	{		return $this->_db->insert_id;	}	public function reset()	{		$fields = $this->loadTableFields();		foreach ($fields as $field)		{			$this->{$field} = null;		}		return $this;	}	public function switchTable($table)	{		$this->_table = $table;		$this->_cache = array();		$this->loadTableFields();		return $this;	}	public function getProperties()	{		return $this->_cache['fields'];	}	protected function loadTableFields()	{		if (empty($this->_cache['fields']))		{			$this->_cache['fields']  = array();			$this->_cache['formats'] = array();			$query = $this->getQuery();			$fields = $query->setQuery('SHOW COLUMNS FROM ' . $this->_table)				->getItems();			foreach ($fields as $field)			{				$field_name = $field->Field;				if (!isset($this->_key) && strcasecmp($field->Key, 'PRI') === 0)				{					$this->_key = $field_name;				}				if (!property_exists($this, $field_name))				{					$this->{$field_name} = null;				}				array_push($this->_cache['fields'], $field_name);				if (preg_match('/(tinyint)|(smallint)|(mediumint)|(int)|(integer)(bigint)/i', $field->Type))				{					$this->_cache['formats'][$field_name] = '%d';				}				elseif (preg_match('/(real)|(double)|(float)|(numeric)|(decimal)/i', $field->Type))				{					$this->_cache['formats'][$field_name] = '%f';				}				else				{					$this->_cache['formats'][$field_name] = '%s';				}			}		}		return $this->_cache['fields'];	}	protected function getDataFormats($data)	{		$formats = array();		foreach ($data as $field => $value)		{			array_push($formats, @$this->_cache['formats'][$field]);		}		return $formats;	}	public function getItems($columns = '*', $filters = array())	{		$query = $this->getQuery();		if (is_array($columns))		{			$columns = join(',', $columns);		}		$query->select($columns)			->from($this->_table);		settype($filters, 'array');		if (!empty($filters))		{			$query->where($filters);		}		$query = apply_filters('sr_get_list_table_query', $query, $this->_context);		return $query->getItems();	}}